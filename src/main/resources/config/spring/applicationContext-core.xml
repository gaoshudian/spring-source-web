<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>


    <bean id="man" class="com.zhuguang.jack.entity.lookup_method.Man" name="man2,man3,man4,man5" lazy-init="false"
          autowire-candidate="false">
        <!--这个标签只会作用在beanDifition.getAttribute(key)-->
        <meta key="key" value="value-man"></meta>
    </bean>
    <!--<bean id="woman" clacom.zhuguang.jentitybean.lookup_method.Womanoman" lazy-init="false" factory-bean="factoryBeanTest" factory-method="getObject"></bean>-->
    <bean id="woman" class="com.zhuguang.jack.entity.lookup_method.Woman" lazy-init="false"></bean>
    <bean id="people" class="com.zhuguang.jack.entity.lookup_method.ShowSixClass">
        <!--lookup-method我们通常称之为获取器注入，它是把一个方法声明为返回某种类型的bean,但
         实际要返回的bean是在配置文件里配置的；
         次方法可用在设计有些可插拔的功能上-->
        <lookup-method name="getPeople" bean="woman"></lookup-method>
    </bean>


    <!--方法替换；可以在运行时用新的方法替换现有的方法 -->
    <bean id="replaceClass" class="com.zhuguang.jack.entity.replaced_method.ReplaceClass" lazy-init="false"/>
    <bean id="originClass" class="com.zhuguang.jack.entity.replaced_method.OriginClass">
        <replaced-method name="method" replacer="replaceClass"></replaced-method>
    </bean>


    <!-- 测试constructor-arg属性的用法 -->
    <bean id="constructorArgEntity" class="com.zhuguang.jack.entity.constructor_arg.ConstructorArgEntity">
        <constructor-arg name="id" value="1"/>
        <constructor-arg name="name" value="student"/>
        <constructor-arg name="graduation" value="false"/>
        <constructor-arg name="dream">
            <list>
                <value>soldier</value>
                <value>scientist</value>
                <value>pilot</value>
            </list>
        </constructor-arg>
        <constructor-arg name="score">
            <map>
                <entry key="math" value="90"/>
                <entry key="english" value="85"/>
            </map>
        </constructor-arg>
    </bean>


    <!--property标签的用法-->
    <bean id="testbean" class="com.zhuguang.jack.entity.property.TestProperty">
        <property name="a" value="aaa"/>
        <property name="b">
            <list>
                <value>aa</value>
                <value>bb</value>
            </list>
        </property>
    </bean>


    <!--<bean id="propertyConfigurer"  class="com.zhuguang.jack.springconfig.LoadProperties">-->
    <!--<property name="locations">-->
    <!--<value>classpath*:config/core/core.properties</value>-->
    <!--</property>-->
    <!--</bean>-->
    <!--<bean id="propertyConfigurerForProject" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
    <!--<property name="order" value="1" />-->
    <!--<property name="ignoreUnresolvablePlaceholders" value="true" />-->
    <!--<property name="location">-->
    <!--<value>classpath:config/core/core.properties</value>-->
    <!--</property>-->
    <!--</bean>-->

    <context:component-scan base-package="com.zhuguang.jack" use-default-filters="true" annotation-config="true">
    <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>-->
    <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>-->
    </context:component-scan>

    <bean id="factoryBeanTest" class="com.zhuguang.jack.factoryBean.FactoryBeanTest">
        <!--<property name="woman" ref="woman"></property>-->
    </bean>

    <bean class="com.zhuguang.jack.scope.ScopeTest" id="scopeTest" scope="session">
        <!-- 通知Spring容器去代理这个bean -->
        <!--scope为request的bean，在每个请求到来时，会创建一个实际对象与当前的请求 对应。而使用A的代理对象时，会通过某种方式获得当前的请求，再根据当前这个请求，获得对应A的实际对象。使用代理对象间接操控的就是与当前请求对应的A的实际对象。-->
        <aop:scoped-proxy/>
        <property name="username" value="Jack"/>
    </bean>


    <bean class="com.zhuguang.jack.scope.CustomBeanFactoryPostProcessor"/>
    <bean class="com.zhuguang.jack.scope.CustomScopeBean" id="customScopeBean" scope="jackScope"/>

    <bean class="com.zhuguang.jack.beanDefinitionRegistryPostProcessor.MyBeanDefinitionRegistryPostProcessor"></bean>
    <bean class="com.zhuguang.jack.beanDefinitionRegistryPostProcessor.MyBeanFactoryPostProcessor"></bean>

    <bean class="com.zhuguang.jack.typeConverter.StringToDateConverter"></bean>

    <bean id="typeClass" class="com.zhuguang.jack.typeConverter.TypeClass" lazy-init="false">
        <property name="date" value="2018-12-12"></property>
        <property name="consultRecord" value="dlajfladsjfieiewir"></property>
    </bean>
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <!-- 自定义转换器 -->
                <bean class="com.zhuguang.jack.typeConverter.StringToDateConverter">
                    <property name="datePattern" value="yyyy-MM-dd"></property>
                </bean>
                <bean class="com.zhuguang.jack.typeConverter.StringToObjectConverter">
                </bean>
            </list>
        </property>
    </bean>

    <!--<bean class="com.zhuguang.jack.aware.TargetClass"></bean>-->
    <!--<context:load-time-weaver aspectj-weaving="autodetect"/>-->
    <!--自定义，这个是类加载的时织入切面
    <context:load-time-weaver></context:load-time-weaver>-->



    <!--当希望一个bean只被某一个类使用时，我们可以使用内部bean。内部bean此时作为某一个类的属性，只能通过该类实例化。-->
    <bean class="com.zhuguang.jack.entity.OutClass">
        <property name="username" value="jack"/>
        <property name="age" value="18"/>
        <property name="innerClass">
            <!--这个就是内部bean，定义在了property属性里面，内部bean只能本外部的bean实例化-->
            <bean class="com.zhuguang.jack.entity.InnerClass">
                <property name="age" value="19"/>
                <property name="username" value="roy"/>
            </bean>
        </property>
    </bean>

    <!--父子bean
    子bean必须与父bean保持兼容，也就是说子bean中必须有父bean定义的所有属性
父bean必须是抽象bean或者定义lazy-init=true也就是不让bean工厂实例化该bean ‘
abstract="true" Spring不会实例化该bean
其实就是一个配置的继承
    -->
    <!--<bean id="parent" clacom.zhuguang.jack.entityan.Parent" abstract="true">-->
    <!--<property name="username" value="parent name"/>-->
    <!--</bean>-->
    <!--<bean id="son" clacom.zhuguang.jack.entityan.Son" parent="parent">-->
    <!--<property name="username" value="son name"/>-->
    <!--<property name="age" value="18"/>-->
    <!--</bean>-->

    <!--<bean class="com.zhuguang.jack.SmartFactoryBeanTest" id="smartFactoryBeanTest" lazy-init="false"></bean>-->

    <!--<bean id="a" clacom.zhuguang.jack.entityan.A" init-method="initMethod" lazy-init="false" autowire="byType">-->
    <!--<property name="b" ref="b"></property>-->
    <!--<property name="username" value="jack"></property>-->
    <!--&lt;!&ndash;<constructor-arg name="b" ref="b"></constructor-arg>&ndash;&gt;-->
    <!--</bean>-->
    <!--<bean id="b" clacom.zhuguang.jack.entityan.B" lazy-init="false" autowire="byType">-->
    <!--<property name="a" ref="a"></property>-->
    <!--&lt;!&ndash;<constructor-arg name="a" ref="a"></constructor-arg>&ndash;&gt;-->
    <!--</bean>-->

    <!--<bean clacom.zhuguang.jack.entityan.ListInjectTest" id="injectTest">
        <property name="list[0]" value="jack"></property>
        <property name="list[1]" value="roy"></property>

        <property name="map[key1]" value="jack"></property>
        <property name="map[key2]" value="jack2"></property>
    </bean>-->

    <bean class="com.zhuguang.jack.prototype.PrototypeTest" id="prototypeTest" scope="prototype"></bean>

    <bean class="com.zhuguang.jack.prototype.PrototypeTestA" id="prototypeTestA" scope="prototype">
        <property name="prototypeTestB" ref="prototypeTestB"/>
    </bean>
    <bean class="com.zhuguang.jack.prototype.PrototypeTestB" id="prototypeTestB" scope="prototype">
        <property name="prototypeTestA" ref="prototypeTestA"/>
    </bean>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="minPoolSize" value="10"/>
        <property name="maxPoolSize" value="100"/>
        <property name="maxIdleTime" value="1800"/>
        <property name="acquireIncrement" value="3"/>
        <property name="maxStatements" value="1000"/>
        <property name="initialPoolSize" value="10"/>
        <property name="idleConnectionTestPeriod" value="60"/>
        <property name="acquireRetryAttempts" value="30"/>
        <property name="breakAfterAcquireFailure" value="false"/>
        <property name="testConnectionOnCheckout" value="false"/>
        <property name="acquireRetryDelay">
            <value>100</value>
        </property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <value>classpath:xml/*Mapper.xml</value>
        </property>
        <!--<property name="databaseIdProvider" ref="databaseIdProvider" />-->
        <!--<property name="plugins">
                <array>
                    <bean class="com.zhuguang.jack.mybatisInterceptor.ExectorInterceptor"></bean>
                    <bean class="com.zhuguang.jack.mybatisInterceptor.PageInterceptor"></bean>
                    <bean class="com.zhuguang.jack.mybatisInterceptor.ResultSetCacheInterceptor"></bean>
                </array>
            </property>
        <property name="plugins">
            <array>
                <bean class="com.zhuguang.jack.mybatisInterceptor.MyPubResultSetHandler"></bean>
                <bean class="com.zhuguang.jack.mybatisInterceptor.CacheExecutorPlugin"></bean>
            </array>
        </property>-->
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
        <property name="basePackage" value="com.zhuguang.jack.dao"/>

        <!--这样会导致property-placeholder加载配置文件失效
            <property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->

        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--Transation-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--    <tx:advice id="userTxAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                &lt;!&ndash;只有目标方法是save开头的才会有事务属性&ndash;&gt;
                &lt;!&ndash;<tx:method name="save*" propagation="REQUIRED" read-only="false"
                           rollback-for="java.lang.RuntimeException" isolation="DEFAULT"/>&ndash;&gt;
                <tx:method name="saveTest" propagation="REQUIRED" read-only="false"
                           rollback-for="java.lang.RuntimeException" isolation="DEFAULT"/>
                <tx:method name="saveTest1" propagation="NESTED" read-only="false"
                           rollback-for="java.lang.RuntimeException" isolation="DEFAULT"/>
                <tx:method name="delete*" propagation="NESTED" read-only="false"
                           rollback-for="java.lang.RuntimeException"/>
                <tx:method name="update*" propagation="REQUIRED" read-only="false"
                           rollback-for="java.lang.RuntimeException"/>
                <tx:method name="check*" propagation="REQUIRED" read-only="false"
                           rollback-for="java.lang.RuntimeException"/>
                <tx:method name="print*" propagation="REQUIRED" read-only="false"
                           rollback-for="java.lang.RuntimeException"/>
                <tx:method name="*" propagation="REQUIRED" read-only="false" isolation="DEFAULT"
                           rollback-for="java.lang.RuntimeException"/>
            </tx:attributes>
        </tx:advice>
        <aop:config proxy-target-class="false">
            <aop:pointcut id="pc"
                          expression="execution(public * com.zhuguang.jack.service..*.*(..))"/>
            <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice"/>
        </aop:config>-->

    <aop:aspectj-autoproxy/>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--<bean class="com.zhuguang.jack.smtransation.MyServiceImpl" id="smmyServiceImpl">
        <property name="txManager" ref="transactionManager"/>
        <property name="txDefinition">
            <bean class="org.springframework.transaction.support.DefaultTransactionDefinition">
                <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
            </bean>
        </property>
    </bean>-->
    <import resource="spring-cache.xml"/>
    <import resource="spring-mongodb.xml"/>


    <!--用profile区分不同的环境 -->
    <!--<beans profile="product">-->
        <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->
            <!--<property name="driverClass">-->
                <!--<value>${jdbc.driverClassName}</value>-->
            <!--</property>-->
            <!--<property name="jdbcUrl">-->
                <!--<value>${jdbc.url}</value>-->
            <!--</property>-->
            <!--<property name="user">-->
                <!--<value>${jdbc.username}</value>-->
            <!--</property>-->
            <!--<property name="password">-->
                <!--<value>${jdbc.password}</value>-->
            <!--</property>-->
            <!--<property name="minPoolSize" value="10" />-->
            <!--<property name="maxPoolSize" value="100" />-->
            <!--<property name="maxIdleTime" value="1800" />-->
            <!--<property name="acquireIncrement" value="3" />-->
            <!--<property name="maxStatements" value="1000" />-->
            <!--<property name="initialPoolSize" value="10" />-->
            <!--<property name="idleConnectionTestPeriod" value="60" />-->
            <!--<property name="acquireRetryAttempts" value="30" />-->
            <!--<property name="breakAfterAcquireFailure" value="false" />-->
            <!--<property name="testConnectionOnCheckout" value="false" />-->
            <!--<property name="acquireRetryDelay">-->
                <!--<value>100</value>-->
            <!--</property>-->
        <!--</bean>-->
    <!--</beans>-->
    <!--<beans profile="test">-->
        <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->
            <!--<property name="driverClass">-->
                <!--<value>${jdbc.driverClassName}</value>-->
            <!--</property>-->
            <!--<property name="jdbcUrl">-->
                <!--<value>${jdbc.url}</value>-->
            <!--</property>-->
            <!--<property name="user">-->
                <!--<value>${jdbc.username}</value>-->
            <!--</property>-->
            <!--<property name="password">-->
                <!--<value>${jdbc.password}</value>-->
            <!--</property>-->
            <!--<property name="minPoolSize" value="10" />-->
            <!--<property name="maxPoolSize" value="100" />-->
            <!--<property name="maxIdleTime" value="1800" />-->
            <!--<property name="acquireIncrement" value="3" />-->
            <!--<property name="maxStatements" value="1000" />-->
            <!--<property name="initialPoolSize" value="10" />-->
            <!--<property name="idleConnectionTestPeriod" value="60" />-->
            <!--<property name="acquireRetryAttempts" value="30" />-->
            <!--<property name="breakAfterAcquireFailure" value="false" />-->
            <!--<property name="testConnectionOnCheckout" value="false" />-->
            <!--<property name="acquireRetryDelay">-->
                <!--<value>100</value>-->
            <!--</property>-->
        <!--</bean>-->
    <!--</beans>-->

</beans>